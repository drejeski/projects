# -*- coding: utf-8 -*-
"""
Created on Sat Nov  7 18:13:10 2020

Application to Monte Carlo simulate a Stochastic pricing of a stock ticker. 

@author: David
"""
import yahoo_fin.stock_info as yf
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.figure import Figure 
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg,  
NavigationToolbar2Tk) 
import numpy as np
import random
from tkinter import *
from tkinter import ttk
import nltk

pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)

def getticker():
    global stockticker
    global companyname
    stockticker=ticker_entry.get()
    print(ticker)
    getdata()
    calculatereturns()
    analystdata()
def getdata():
    """
    Function to get data for the selected stock interval
    """
    
    global splist
    global sp_historical
    #splist=yf.tickers_sp500()
    splist=["0"]
    splist[0]=stockticker
    sp_historical = {}
    for ticker in splist:
        try:    
            sp_historical[ticker]= yf.get_data(ticker, start_date="5/21/20", end_date="6/8/2021", interval="1d")
        except:
            pass

def calculatereturns():
    """
    Function to get the adjusted close of the ticker and calculate the positive returns as well as negative returns. 
    Uses Monte Carlo Markov chain simulation with a transition matrix of positive and negative return states. Draw a random probability to determine which state to jump to and then draw a distributed return from the positive and negative returns to calculate forecasted price.

    Returns
    -------
    None.

    """
    
    global returns
    global canvas
    returns={}
    stddeviations={}
    stddevpos={}
    stddevneg={}
    positivereturns={}
    negativereturns={}
    startprice=0
    for ticker in splist:
        try:
            historical=sp_historical[ticker]
            returns[ticker]=historical['adjclose'].pct_change()
            positivereturns[ticker]=[x for x in returns[ticker] if x>0]
            negativereturns[ticker]=[x for x in returns[ticker] if x<0]
            stddeviations[ticker]=returns[ticker].std()
            stddevpos[ticker]=np.std(positivereturns[ticker])
            stddevneg[ticker]=np.std(negativereturns[ticker])
            startprice=historical['adjclose'].iat[-1]
        except:
            print("No returns")
            pass    
 
    meanreturn=np.nanmean(returns[stockticker])
    meanneg=np.nanmean(negativereturns[stockticker])
    meanpos=np.nanmean(positivereturns[stockticker])
    randomreturn=pd.DataFrame()
    price=np.zeros((250,30))
    
    transition_matrix=[["++","+-","-+","--"],[0,0,0,0]]
    for i in range (len(returns[stockticker])):
        if i>1:
            if returns[stockticker].iloc[i]>0 and returns[stockticker].iloc[i-1]>0:
                transition_matrix[1][0]+=1
            elif returns[stockticker].iloc[i]>0 and returns[stockticker].iloc[i-1]<0:
                transition_matrix[1][1]+=1
            elif returns[stockticker].iloc[i]<0 and returns[stockticker].iloc[i-1]>0:
                transition_matrix[1][2]+=1   
            else:
               transition_matrix[1][3]+=1   
    transition_matrix_probability=[["++","+-","-+","--"],[transition_matrix[1][0]/(transition_matrix[1][0]+transition_matrix[1][1]),1-transition_matrix[1][0]/(transition_matrix[1][0]+transition_matrix[1][1]),transition_matrix[1][2]/(transition_matrix[1][2]+transition_matrix[1][3]),1-transition_matrix[1][2]/(transition_matrix[1][2]+transition_matrix[1][3])]]
    
    for l in range(0,30):  
        for i in range(0,250):
            if i==0:
                price[i][l]=startprice
            elif i==1:
                randomreturn=np.random.normal(meanreturn,stddeviations[stockticker])
                price[i][l]=price[i-1][l]+price[i-1][l]*randomreturn
                if randomreturn<0:
                    previous=-1
                else:
                    previous=1
            elif i>1:
                if previous>0:
                    transition=random.random()
                    if transition<=transition_matrix_probability[1][2]:
                        randomreturn=np.random.normal(meanpos,stddevpos[stockticker])
                    else:
                        randomreturn=np.random.normal(meanneg,stddevneg[stockticker])
                else:
                    transition=random.random()
                    if transition<=transition_matrix_probability[1][0]:
                        randomreturn=np.random.normal(meanpos,stddevpos[stockticker])
                    else:
                        randomreturn=np.random.normal(meanneg,stddevneg[stockticker])
                price[i][l]=price[i-1][l]+price[i-1][l]*randomreturn
                if randomreturn<0:
                    previous=-1
                else:
                    previous=1
    avgprice=np.mean(price,axis=1)
    standarddev=np.std(price,axis=1)
    upperCI=avgprice+standarddev*1.96/10
    lowerCI=avgprice-standarddev*1.96/10
    fig=Figure(figsize=(10,10))
    canvas=FigureCanvasTkAgg(fig, master=mainwindow)    
#Plots here   
    plot1=fig.add_subplot(221)
    plot1.plot(avgprice)
    plot1.fill_between(range(0,250),lowerCI,upperCI,alpha=0.3)
    plot1.plot(avgprice, color="y")
    plot1.title.set_text("Aggregate Price Estimate of "+ stockticker)
    
    plot2=fig.add_subplot(222)
    plot2.plot(price) 
    plot2.title.set_text("Price Estimate of "+ stockticker)

    
    plot3=fig.add_subplot(223)
    plot3.hist(returns[stockticker])
    plot3.title.set_text("Histogram of Daily Returns "+stockticker)
#End of plots... start of draw
    canvas.draw()
    canvas.get_tk_widget().grid(column=1, row=3)

    

def analystdata():
    """
    Use beautiful soup to get the analyst recommendation from Yahoo.
    
    """
    
    import requests
    from bs4 import BeautifulSoup
    import nltk
    from nltk.corpus import stopwords
    from nltk.sentiment import SentimentIntensityAnalyzer
    
    URL = "https://www.marketwatch.com/investing/stock/"+ stockticker +"/analystestimates?mod=mw_quote_tab"
    page = requests.get(URL)
    soup = BeautifulSoup(page.content, 'html.parser')
    tabledata=soup.find_all("td")
    rowdata=[]
    for row in tabledata:
        rowdata.append(row.get_text())
    
    anop=StringVar()
    recommendation=rowdata[rowdata.index("Average Recommendation")+1]
    l=Label(mainwindow, text="Analyst Opinion")
    l.grid(column=1,row=4)          
    
    l=Label(mainwindow, textvariable=anop)
    anop.set(recommendation)
    l.grid(sticky="N",column=1,row=5)        
    


root=Tk()
root.title("Stock Projection")
mainwindow=ttk.Frame(root, padding="3 3 12 12")
mainwindow.grid(column=0, row=0, sticky=(N, W, E, S))
root.columnconfigure(0, weight=1)
root.rowconfigure(0, weight=1)	
ticker=StringVar()
ticker_entry=ttk.Entry(mainwindow, textvariable=ticker)
ticker_entry.grid(column=1,row=1)
ttk.Button(mainwindow,text="Get Projection", command=getticker).grid(column=1,row=2)
root.mainloop()

    
