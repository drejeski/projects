# -*- coding: utf-8 -*-
"""
Created on Thu Jun  3 18:50:51 2021

@author: David
"""

 

import random
import matplotlib.pyplot as plt
import statistics as stat
from scipy import stats
   
class player:
    def __init__(self,name,number,single,double,triple,hr):
        self.name=name
        self.base=-1
        self.number=number
        self.single=single
        self.double=double
        self.triple=triple
        self.homerun=hr
    def atbat(self):
        """
        Parameters
        ----------
        name : Sting
            Player name.

        Returns
        -------
        int
            Hit value: 1 single, 2 double, 3 triple, 4 HR, 0 Out.
        """
        x=random.random()   
        if 0<=x<=self.single:
            self.base=0
            return 1
        elif self.single<x<=(self.single+self.double):
            self.base=0
            return 2
        elif (self.single+self.double)<x<=(self.single+self.double+self.triple):
            self.base=0
            return 3
        elif (self.single+self.double+self.triple)<x<=(self.single+self.double+self.triple+self.homerun):
            self.base=0
            return 4
        else:
            return 0
      
    def updatebase(self,hit):

        """

        Parameters
        ----------
        hit : Integer
            the hit number from atbat function of the batter.
 
        Returns
        -------
        int
            Run scored or not to add to the run total.

        """
        if self.base>=0:
            self.base+=hit
            #print(self.number,"Moves to",self.base)
        if self.base>3:
            #print(self.number,"Scored")
            self.base=-1
            return 1
        else:
            return 0
#Functions

def simulategame(team):
    """

    Parameters
    ----------
    team : List
        List of hitter objects.


    Returns
    -------
    runs : Intger

        The runs scored.
    """
    index=0
    runs=0
    for i in range(9):
        outs=0
        #print("------INNING",i,"-----")
        while outs<3:
            hit=team[index].atbat()
            #print("Batter number",team[index].number,hit)
            if hit==0:
                outs+=1
            else:
                for batters in team:
                    runs+=batters.updatebase(hit)        

            index+=1
            if index>8:
                index=0
        for batters in team:
            batters.base=-1
    return runs
#Array declaration for the teams and scores per team
team1=[]
team2=[]
team3=[]
gamesMacGuire=[]
gamesGwynn=[]
gamesMixed=[]

for i in range(9):
    #M is Mark McGuire, G is Tony Gwynn
    team1.append(player("M",i,0.1249,0.047,0.001,0.092))
    team2.append(player("G",i,.2024,0.0585,0.0145,0.0628))
    if (i<2) | (6<=i):
        team3.append(player("M",i,0.1249,0.047,0.001,0.092))
    else:
        team3.append(player("G",i,.2024,0.0585,0.0145,0.0628))
for i in range(100):
   gamesMacGuire.append(simulategame(team1))
   gamesGwynn.append(simulategame(team2))
   gamesMixed.append(simulategame(team3))

#%%
fig, axs=plt.subplots(1,3,sharey=True)
axs[0].hist(gamesMacGuire)
axs[1].hist(gamesGwynn)
axs[2].hist(gamesMixed)
axs[0].set_title("MacGuire")
axs[1].set_title("Gwynn")
axs[2].set_title("Mixed")
axs[0].set_ylabel("Frequency")
for ax in axs:
    ax.set_xlabel("Runs")
fig.suptitle("Runs Per Game")
#print(stat.mean(gamesMacGuire))

#print(stat.mean(gamesGwynn))

#print(stat.mean(gamesMixed)) 

def simulatedannealing(team3):
    incumbentsolution=team3
    neighborsolution=[]
    incumbentruns=[]
    neighborruns=[]
    swap=0
    swap2=0
    for i in range(100):
                incumbentruns.append(simulategame(incumbentsolution))
                incumbentavg=stat.mean(incumbentruns)
    for j in range(10):
        for i in range(8):
            print(incumbentsolution[i].name,end=" ")
        print(" ")
        swap=0
        swap2=0
        while swap==swap2:
            swap=random.randint(0, 8)
            swap2=random.randint(0,8)
        neighborsolution=list(incumbentsolution)
        swapbatter=neighborsolution[swap]
        neighborsolution[swap]=neighborsolution[swap2]
        neighborsolution[swap2]=swapbatter
        neighborruns=[]
        for i in range(100):
           neighborruns.append(simulategame(neighborsolution))
           neighboravg=stat.mean(neighborruns)
        #print(incumbentavg)
        #print(neighboravg)
        p=stats.ttest_ind(neighborruns,incumbentruns,equal_var=False)[1]
        #print(p)
        if (p<=0.05) and (neighboravg>incumbentavg):
            print("significant")
            incumbentsolution=list(neighborsolution)
            incumbentruns=neighborruns
            incumbentavg=neighboravg
        else:
           print(0)

simulatedannealing(team3)
